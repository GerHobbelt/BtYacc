.\" -*- coding: us-ascii -*-
.if \n(.g .ds T< \\FC
.if \n(.g .ds T> \\F[\n[.fam]]
.de URL
\\$2 \(la\\$1\(ra\\$3
..
.if \n(.g .mso www.tmac
.TH btyacc 1 "January 30, 2001" "" ""
.SH NAME
btyacc \- an LALR(1) parser generator with support for backtracking
.SH SYNOPSIS
'nh
.fi
.ad l
\fBbtyacc\fR \kx
.if (\nx>(\n(.l/2)) .nr x (\n(.l/5)
'in \n(.iu+\nxu
[-b \fIprefix\fR] [-d] [-D\fINAME\fR]\&... [-E] [-l] [-r] [-S \fIx.ske\fR] [-t] [-v] {\fIfilename.y\fR}
'in \n(.iu-\nxu
.ad b
'hy
.SH DESCRIPTION
btyacc is a modified version of byacc (Berkeley YACC), which
in turn is a public domain version of the original AT[amp ]T YACC
parser generator.
.PP
btyacc reads the grammar specification in the file
\fIfilename.y\fR and generates an LR(1)
parser for it. The parser consists of a set of LALR(1) parsing
tables and a driver routine written in the C programming
language. btyacc normally writes the parse tables and the driver
routine to the file
\fIprefix\fR\*(T<\fI.tab.c\fR\*(T>,
where \fIprefix\fR defaults to `y'.
.PP
For a detailed description of the format of a grammar
specification, and an excellent tutorial on how to use YACC-like
tools, see the info manual for GNU
\fBbison\fR.
btyacc-specific extensions are explained below.
.PP
\fINote:\fR The parser skeleton supplied by
btyacc's upstream author only compiles as C++. Use the skeleton
\*(T<\fI/usr/doc/btyacc/examples/btyacc\-c.ske\fR\*(T> to
generate a parser that compiles both as C and C++.
(Unfortunately, this alternative skeleton does not currently
check malloc() return values.)
.SH OPTIONS
.TP
-b \fIprefix\fR
Change the prefix prepended to the output file names
to the string denoted by \fIprefix\fR.
The default prefix is the character `y'.
.TP
-d
Create a header file called
\fIprefix\fR\*(T<\fI.tab.h\fR\*(T>
along with
\fIprefix\fR\*(T<\fI.tab.c\fR\*(T>,
containing the symbol definitions and a declaration for
\*(T<YYSTYPE\*(T> and
\*(T<yylval\*(T>.
.TP
-D\fINAME\fR
Define the btyacc preprocessor variable
\fINAME\fR, for use with
\*(T<%ifdef \*(T>\fINAME\fR
directives in the grammar file.
.TP
-E
Print the preprocessed grammar to standard
output.
.TP
-l
Do not insert \*(T<#line\*(T> directives into
the generated parser code.
.TP
-r
Write the parser code and the associated tables to
different files. Whereas the tables can be found in
\fIprefix\fR\*(T<\fI.tab.c\fR\*(T>
as before, the code now gets written to
\fIprefix\fR\*(T<\fI.code.c\fR\*(T>.
.TP
-S \fIx.ske\fR
Select a different parser skeleton. The default
skeleton is hardwired into the program, but a copy can be
found in the file \*(T<\fIbtyaccpa.ske\fR\*(T>.
.TP
-t
Cause debugging code to be compiled into the generated
parser.
.TP
-v
Write a human-readable description of the generated
parser to \*(T<\fIy.output\fR\*(T>. It includes
parser states, actions for a look-ahead token and
information about any conflicts.
.SH "BTYACC EXTENSIONS"
.SS "BACKTRACKING SUPPORT"
Whenever a btyacc generated parser runs into a
shift-reduce or reduce-reduce error in the parse table, it
remembers the current parse point (stack and input stream
state), and goes into trial parse mode. It then continues
parsing, ignoring most rule actions. If it runs into an error
(either through the parse table or through an action calling
\*(T<YYERROR\*(T>), it backtracks to the most recent
conflict point and tries a different alternative. If it finds
a successful path (reaches the end of the input or an action
calls \*(T<YYVALID\*(T>), it backtracks to the point
where it first entered trial parse mode, and continues with a
full parse (executing all actions), following the path of the
successful trial.
.PP
Actions in btyacc come in two flavors:
\*(T<{}\*(T> actions, which are only executed when
not in trial mode, and \*(T<[]\*(T> actions, which
are executed regardless of mode.
.PP
Example: In YACC grammars for C, a
standard hack known as the "lexer feedback hack" is used to
find typedef names. The lexer uses semantic information to
decide if any given identifier is a typedef name or not and
returns a special token. With btyacc, you no longer need to do
this; the lexer should just always return an identifier. The
btyacc grammar then needs a rule of the form:
.PP
\*(T<typename: ID [ if (!IsTypeName(LookupId($1)))
YYERROR; ]\*(T>
.PP
However, note that adding backtracking rules slows down
the parser. In practice, you should try to restrict the number
of conflicts in the grammar to what is absolutely necessary.
Consider using the "lexer feedback hack" if it is a clean
solution, and reserve backtracking for a few special
cases.
.PP
btyacc runs its trials using the rule "try shifting first,
then try reducing in the order that the conflicting rules
appear in the input file". This means you can implement
semantic disambiguation rules like, for example: (1) If it
looks like a declaration it is, otherwise (2) If it looks like
an expression it is, otherwise (3) it is a syntax error [Ellis
[amp ] Stroustrup, Annotated C++ Reference Manual, p93]. To
achieve this, put all the rules for declarations before the
rules for expressions in the grammar file.
.PP
Backtracking is only triggered when the parse hits a
shift/reduce or reduce/reduce conflict in the table. If you
have no conflicts in your grammar, there is no extra cost,
other than some extra code which will never be invoked.
.PP
Currently, the generated parser performs
\fIno\fR pruning of alternate parsing paths. To
avoid an exponential explosion of possible paths (and parsing
time), you need to manually tell the parser when it can throw
away saved paths using the \*(T<YYVALID\*(T>
statement. In practice, this turns out to be fairly easy to
do. For example, a C++ parser can just contain
\*(T<[YYVALID;]\*(T> after every complete declaration
and statement rule, resulting in the backtracking state being
pruned after seeing a `;' or `}' - there will never be a
situation in which it is useful to backtrack past either of
these.
.SS "IMPROVED TOKEN POSITION HANDLING"
Compilers often need to build ASTs (abstract syntax trees)
such that every node in a tree can relate to the parsed
program source it came from. The \*(T<YYPOSN\*(T>
mechanism supported by btyacc helps you in automating the text
position computation and in assigning the computed text
positions to the AST nodes.
.PP
In standard YACCs every token and every non-terminal
has an \*(T<YYSTYPE\*(T> semantic value attached to
it. With btyacc, every token and every non-terminal also has
an \*(T<YYPOSN\*(T> text position attached to it.
\*(T<YYPOSN\*(T> is a user-defined type.
.PP
btyacc maintains a stack of text position values in the
same way that it maintains a stack of semantic values. To make
use of the text position feature, you need to
\*(T<#define\*(T> the following:
.TP
YYPOSN
Preprocessor symbol for the C/C++ type of
the text position attached to every token and
non-terminal.
.TP
yyposn
Global variable of type \*(T<YYPOSN\*(T>.
The lexer must assign the text position of the
returned token to yyposn, just like it assigns the
semantic value of the returned token to yylval.
.TP
YYREDUCEPOSNFUNC
Preprocessor symbol for a function that is called
immediately after the regular grammar rule reduction
has been performed, to reduce text positions located
on the stack.

Typically, this function extracts text positions
from the right-hand side rule components and either
assigns them to the returned $$ structure/tree or, if
no $$ value is returned, puts them into the ret text
position where it will be picked up by other rules
later. Its prototype is:
'nh
.fi
.ad l
\*(T<void \fBReducePosn\fR\*(T> \kx
.if (\nx>(\n(.l/2)) .nr x (\n(.l/5)
'in \n(.iu+\nxu
\*(T<(YYPOSN[amp ] \fIret\fR, YYPOSN* \fIterm_posns\fR, YYSTYPE* \fIterm_vals\fR, int \fIterm_no\fR, int \fIstk_pos\fR, int \fIyychar\fR, YYPOSN[amp ] \fIyyposn\fR, UserType \fIextra\fR);\*(T>
'in \n(.iu-\nxu
.ad b
'hy
.RS
.TP
ret
Reference to the text position
returned by the rule. You must overwrite this
with the computed text position that the rule
yields, analogous to the $$ semantic
value.
.TP
term_posns
Array of the right-hand side rule
components' \*(T<YYPOSN\*(T> text
positions, analogous to $1, $2, ..., $N for
the semantic values.
.TP
term_vals
Array of the right-hand side rule
components' \*(T<YYSTYPE\*(T> values.
These are the $1, ..., $N
themselves.
.TP
term_no
Number of components in the right
hand side of the reduced rule, i.e. the size
of the term_posns and term_vals arrays. Also
equal to N in $1, ..., $N.
.TP
stk_pos
\*(T<YYSTYPE\*(T>/\*(T<YYPOSN\*(T>
stack position before the
reduction.
.TP
yychar
Lookahead token that immediately
follows the reduced right hand side
components.
.TP
yyposn
\*(T<YYPOSN\*(T> of the
token that immediately follows the reduced
right hand side components.
.TP
extra
User-defined extra argument passed
to ReducePosn.
.RE
.TP
YYREDUCEPOSNFUNCARG
Extra argument passed to the ReducePosn
function. This argument can be any variable defined in
\*(T<\fIbtyaccpa.ske\fR\*(T>.
.SS "TOKEN DEALLOCATION DURING ERROR RECOVERY"
For most YACC-like parser generators, the action of the
generated parser upon encountering a parse error is to throw
away semantic values and input tokens until a rule containing
the special non-terminal \*(T<error\*(T> can be
matched. Discarding of tokens is simply performed by
overwriting variables and array entries of type
\*(T<YYSTYPE\*(T> with new values.
.PP
Unfortunately, this approach leads to a memory leak if
\*(T<YYSTYPE\*(T> is a pointer type. btyacc allows
you to supply functions for cleaning up the semantic and text
position values, by \*(T<#define\*(T>ing the
following symbols in the preamble of your grammar file:
.PP
.TP
YYDELETEVAL
Preprocessor symbol for a function to call
before the semantic value of a token or non-terminal
is discarded.
.TP
YYDELETEPOSN
Preprocessor symbol for a function to call
before the text position of a token or non-terminal is
discarded.
.PP
Both functions are called with two arguments. The first
argument of type \*(T<YYSTYPE\*(T> or
\*(T<YYPOSN\*(T> is the value that will be discarded.
The second argument is of type \*(T<int\*(T> and is
one of three values:
.TP
0
discarding input
token
.TP
1
discarding state on
stack
.TP
2
cleaning up stack when
aborting
.SS "DETAILED SYNTAX ERROR REPORTING"
If you \*(T<#define\*(T> the preprocessor
variable \*(T<YYERROR_DETAILED\*(T> in your grammar
file, you must also define the following error processing
function:
'nh
.fi
.ad l
\*(T<void \fByyerror_detailed\fR\*(T> \kx
.if (\nx>(\n(.l/2)) .nr x (\n(.l/5)
'in \n(.iu+\nxu
\*(T<(char* \fItext\fR, int \fIerrt\fR, YYSTYPE[amp ]
\fIerrt_value\fR, YYPOSN[amp ] \fIerrt_posn\fR);\*(T>
'in \n(.iu-\nxu
.ad b
'hy
.TP
text
error message
.TP
errt
code of the token that caused the
error
.TP
errt_value
value of the token that caused the
error
.TP
errt_posn
text position of token that caused
error
.SS "PREPROCESSOR DIRECTIVES"
btyacc supports defining symbols and acting on them with
conditional directives inside grammar files, not unlike the C
preprocessor.
.TP
%define \fINAME\fR
Define the preprocessor symbol
\fINAME\fR. Equivalent to the
command line switch
\*(T<\-D\*(T>\fINAME\fR.
.TP
%ifdef \fINAME\fR
If preprocessor variable
\fINAME\fR is defined, process the
text from this \*(T<%ifdef\*(T> to the closing
\*(T<%endif\*(T>, otherwise skip
it.
.TP
%endif
Closing directive for
\*(T<%ifdef\*(T>. \*(T<%ifdef\*(T>s
cannot be nested.
.TP
%include \fIFILENAME\fR
Process contents of the file named
\fIFILENAME\fR. Only one nesting
level of \*(T<%include\*(T> is
allowed.
.TP
%ident \fISTRING\fR
Insert an `\*(T<#ident
\*(T>\fISTRING\fR' directive into
the output file. \fISTRING\fR must be a
string constant enclosed in "".
.SS "INHERITED ATTRIBUTES"
Inherited attributes are undocumented. (See the
\*(T<\fIREADME\fR\*(T> and the btyacc source code for a
little information.) If you work out how they work, contact me
at [lt ]<\*(T<atterer@debian.org\*(T>>[gt ]!
.SH BUGS
The worst-case complexity of parsing is exponential for any
grammar which allows backtracking to take place. In other words,
a btyacc-generated parser constitutes a denial-of-service bug if
used in applications where an attacker is able to supply
specially crafted data as input to the parser. (For all
"regular" input data, the potentially exponential complexity is
not normally an issue.)
.PP
bison's \*(T<%expect\*(T> directive is not
supported.
.PP
There is no \*(T<%else\*(T> and
\*(T<%ifndef\*(T>. \*(T<%ifdef\*(T>s and
\*(T<%include\*(T>s cannot be nested.
.SH AUTHORS
Robert Corbett
[lt ]<\*(T<robert.corbett@eng.sun.com\*(T>>[gt ] /
[lt ]<\*(T<corbett@berkeley.edu\*(T>>[gt ] was one of the
original authors of Berkeley byacc. Chris Dodd
[lt ]<\*(T<chrisd@reservoir.com\*(T>>[gt ] had the brilliant
idea of adding backtracking capabilities, and is responsible for
the initial backtracking changes. Vadim Maslov
[lt ]<\*(T<vadik@siber.com\*(T>>[gt ] further improved the
code.
.PP
This documenation was written by Richard Atterer
[lt ]<\*(T<atterer@debian.org\*(T>>[gt ] for the Debian
GNU/Linux distribution, but is donated to the public domain and
may thus be used freely for any purpose.
.SH FILES
\*(T<\fI/usr/doc/btyacc/examples/btyaccpa.ske\fR\*(T>
.br
\*(T<\fI/usr/doc/btyacc/examples/btyacc\-c.ske\fR\*(T>
.br
\*(T<\fI/usr/doc/btyacc/README\fR\*(T>
.SH "SEE ALSO"
\fBbison\fR(1) (or `info bison'),
\fBbyacc\fR(1),
\fByacc\fR(1),
\fBantlr\fR(1)
