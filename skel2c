BEGIN { 
    havesection = 0;
    nsec = 0;
}

/^%%/ { 
    if (havesection) 
    {
        printf "    0\n};\n\n";
    }
    if (NF >= 2) 
    {
		fname = FILENAME;

		# Could use 'gsub(/\\/, "\\\\")' instead of the following
		# two lines, but there's a bug in mawk and the original
		# awk (not in gawk) which is triggered by that.
		gsub(/\\/, "\\\1", fname);
		gsub(/\1/, "\\", fname);
		gsub(/\t/, "\\t", fname);
		gsub(/\"/, "\\\"", fname);

		fname_as_varname = fname;
		gsub(/\..*/, "", fname_as_varname);
		gsub(/[^a-zA-Z0-9_]+/, "_", fname_as_varname);
		gsub(/_+/, "_", fname_as_varname);

		if (nsec == 0)
		{
			printf  "/*\n** This file generated automatically from %s\n*/\n\n", FILENAME; 
			printf "#include \"defs.h\"\n\n\n\n";
		}

        havesection = 1;
        section = $2;
        seclist[nsec] = section;
        nsec = nsec + 1;
        
        printf "static char const * const %s[] =\n{\n", $2;

        printf "    \"#line %d \\\"%s\\\"\",\n", FNR+1, fname; 
    } 
    else 
    {
        havesection = 0;
    }
    next; 
}

{ 
    if (havesection) 
    {
        #gsub(/\\/, "\\\\");
        # Could use 'gsub(/\\/, "\\\\")' instead of the following
        # two lines, but there's a bug in mawk and the original
        # awk (not in gawk) which is triggered by that.
        gsub(/\\/, "\\\1");
        gsub(/\1/, "\\");
        gsub(/\t/, "\\t");
        gsub(/\"/, "\\\"");
        printf "    \"%s\",\n", $0; 
    } 
    else 
    {
        print $0; 
    }
}

END   { 
    if (havesection) 
    {
        printf "    0\n};\n\n"; 
    }
    if (nsec > 0) 
    {
        printf "struct section section_list_%s[] = {\n", fname_as_varname;
        for (i=0; i<nsec; ++i)
            printf "\t{ \"%s\", &%s[0] },\n", seclist[i], seclist[i];
        printf "\t{ 0, 0 } };\n"
    }
}
